@using RecipeMvc.Core
@using RecipeMvc.Core.Editors
@using RecipeMvc.Domain
@using RecipeMvc.Facade.Recipe
@using Newtonsoft.Json
@model RecipeView
@{
    ViewData["Title"] = "Edit Recipe";
    var ingredients = ViewBag.AvailableIngredients as List<IngredientView> ?? new();
}

<h2>Edit Recipe</h2>

<form asp-action="Edit" method="post" enctype="multipart/form-data" id="edit-recipe-form">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @{
        await Html.RenderPartialAsync("_EditRecipe", Model);
    }
    <div class="form-group mb-3">
        <label><strong>Image</strong></label>
        <input asp-for="ImageFile" type="file" class="form-control" />
        <span asp-validation-for="ImageFile" class="text-danger"></span>
    </div>

    <label><strong>Ingredients</strong></label>
    <div class="row mb-2">
        <div class="col position-relative">
            <input id="ingredient-search" class="form-control" placeholder="Search ingredient..." autocomplete="off" aria-label="Search ingredient" />
            <div id="ingredient-dropdown" class="dropdown-menu w-100" style="max-height:200px;overflow-y:auto;position:absolute;z-index:1000; display:none;">
				@if (ingredients != null && ingredients.Any()) {
				    @foreach (var ing in ingredients) {
                        <button type="button" class="dropdown-item" data-id="@ing.Id" data-name="@ing.Name" data-unit="@ing.Unit">@ing.Name (@ing.Unit)</button>
                    }
                }
            </div>
        </div>
        <div class="col">
            <input type="number" id="ingredient-amount" class="form-control" placeholder="Amount" min="0" step="any" aria-label="Amount" />
        </div>
        <div class="col">
            <button type="button" id="add-ingredient" class="btn btn-secondary">Add</button>
        </div>
    </div>
    <ul id="added-ingredients" class="list-group mb-3"></ul>
    <div id="ingredients-hidden"></div>

    <button type="submit" class="btn btn-primary">Save</button>
</form>

@section Scripts {
    <script>
        (function() {
            const searchInput = document.getElementById('ingredient-search');
            const dropdown = document.getElementById('ingredient-dropdown');
            const ul = document.getElementById('added-ingredients');
            const form = document.getElementById('edit-recipe-form');
            const amountInput = document.getElementById('ingredient-amount');
            const hiddenContainer = document.getElementById('ingredients-hidden');

            let ingredientsList = [];

            let dropdownHasFocus = false;
            let selectedIngredientId = '';
            let selectedIngredientName = '';
            let selectedIngredientUnit = '';

            searchInput.addEventListener('focus', () => dropdown.style.display = 'block');
            searchInput.addEventListener('blur', () => setTimeout(() => {
                if (!dropdownHasFocus) dropdown.style.display = 'none';
            }, 150));
            dropdown.addEventListener('mouseenter', () => dropdownHasFocus = true);
            dropdown.addEventListener('mouseleave', () => {
                dropdownHasFocus = false;
                setTimeout(() => {
                    if (document.activeElement !== searchInput) dropdown.style.display = 'none';
                }, 150);
            });

            searchInput.addEventListener('input', function () {
                const search = this.value.trim().toLowerCase();
                let anyVisible = false;
                document.querySelectorAll('#ingredient-dropdown .dropdown-item').forEach(item => {
                    const visible = item.textContent.toLowerCase().includes(search);
                    item.style.display = visible ? '' : 'none';
                    if (visible) anyVisible = true;
                });
                dropdown.style.display = anyVisible ? 'block' : 'none';
                selectedIngredientId = '';
                selectedIngredientName = '';
                selectedIngredientUnit = '';
            });
            document.querySelectorAll('#ingredient-dropdown .dropdown-item').forEach(item => {
                item.addEventListener('click', function () {
                    selectedIngredientId = this.dataset.id;
                    selectedIngredientName = this.dataset.name;
                    selectedIngredientUnit = this.dataset.unit;
                    searchInput.value = selectedIngredientName;
                    dropdown.style.display = 'none';
                    searchInput.focus();
                });
            });
            function addOrUpdateIngredient(id, name, amount) {
                if (!id) {
                    alert("Please select a valid ingredient from the list.");
                    return;
                }
                if (isNaN(amount) || amount <= 0) {
                    alert("Please enter a valid positive amount.");
                    return;
                }
                const existingIndex = ingredientsList.findIndex(i => i.IngredientId === id);
                if (existingIndex !== -1) {
                    ingredientsList[existingIndex].Quantity += amount;
                } else {
                    ingredientsList.push({ IngredientId: id, Name: name, Quantity: amount, Unit: unit });
                }

                rebuildIngredientsList();
            }
            function rebuildIngredientsList() {
                ul.innerHTML = '';
                hiddenContainer.innerHTML = '';

                ingredientsList.forEach((ingredient, index) => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item d-flex justify-content-between align-items-center';
                    li.setAttribute('data-id', ingredient.IngredientId);

                    const span = document.createElement('span');
                    span.className = 'ingredient-text';
                    span.textContent = `${ingredient.Name} - ${ingredient.Quantity.toFixed(2).replace('.', ',')} ${ingredient.Unit || ''}`;

                    const removeBtn = document.createElement('button');
                    removeBtn.type = 'button';
                    removeBtn.className = 'btn btn-sm btn-danger ms-2 remove-ingredient';
                    removeBtn.textContent = 'Remove';
                    removeBtn.onclick = () => {
                        ingredientsList.splice(index, 1);
                        rebuildIngredientsList();
                    };

                    li.appendChild(span);
                    li.appendChild(removeBtn);
                    ul.appendChild(li);

                    const idxInput = document.createElement('input');
                    idxInput.type = 'hidden';
                    idxInput.name = 'Ingredients.Index';
                    idxInput.value = index;
                    hiddenContainer.appendChild(idxInput);

                    const idInput = document.createElement('input');
                    idInput.type = 'hidden';
                    idInput.name = `Ingredients[${index}].IngredientId`;
                    idInput.value = ingredient.IngredientId;
                    hiddenContainer.appendChild(idInput);

                    const qtyInput = document.createElement('input');
                    qtyInput.type = 'hidden';
                    qtyInput.name = `Ingredients[${index}].Quantity`;
                    const qtyString = ingredient.Quantity.toFixed(2).replace('.', ',');
                    qtyInput.value = qtyString;
                    hiddenContainer.appendChild(qtyInput);

                    const unitInput = document.createElement('input');
                    unitInput.type = 'hidden';
                    unitInput.name = `Ingredients[${index}].Unit`;
                    unitInput.value = ingredient.Unit || '';
                    hiddenContainer.appendChild(unitInput);

                });
            }

            (function initFromModel() {
                const initialIngredients = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Ingredients ?? []));
                const availableIngredients = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AvailableIngredients ?? new List<dynamic>()));

                ingredientsList = initialIngredients.map(i => {
                    const found = availableIngredients.find(ai => ai.Id === i.IngredientId);
                    return {
                        IngredientId: i.IngredientId.toString(),
                        Name: found ? found.Name : 'Unknown',
                        Quantity: parseFloat(i.Quantity),
                        Unit: found ? found.Unit : ''
                    };
                });
                rebuildIngredientsList();
            })();

            document.getElementById('add-ingredient').addEventListener('click', () => {
                if (!selectedIngredientId) {
                    alert('Please select an ingredient from the dropdown.');
                    return;
                }
                const amount = parseFloat(amountInput.value);
                if (isNaN(amount) || amount <= 0) {
                    alert('Please enter a valid positive amount.');
                    return;
                }

                addOrUpdateIngredient(selectedIngredientId, selectedIngredientName, amount, selectedIngredientUnit);

                selectedIngredientId = '';
                selectedIngredientName = '';
                selectedIngredientUnit = '';
                searchInput.value = '';
                amountInput.value = '';

                document.querySelectorAll('#ingredient-dropdown .dropdown-item').forEach(item => item.style.display = '');
            });
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                rebuildIngredientsList();
                form.submit(); 
            });
        })();
    </script>
}